/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/rpg/{system}/activity/act": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    system: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["Rpg.ModObjects.Server.RpgRequest.Rpg.ModObjects.Server.Ops.ActivityAct"];
                    "text/json": components["schemas"]["Rpg.ModObjects.Server.RpgRequest.Rpg.ModObjects.Server.Ops.ActivityAct"];
                    "application/*+json": components["schemas"]["Rpg.ModObjects.Server.RpgRequest.Rpg.ModObjects.Server.Ops.ActivityAct"];
                    "application/json-patch+json": components["schemas"]["Rpg.ModObjects.Server.RpgRequest.Rpg.ModObjects.Server.Ops.ActivityAct"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        /** @description The list of notifications produced during the request. */
                        "Umb-Notifications"?: components["schemas"]["NotificationHeaderModel"][] | null;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Rpg.ModObjects.Server.RpgResponse.Rpg.ModObjects.Actions.Activity"];
                        "text/json": components["schemas"]["Rpg.ModObjects.Server.RpgResponse.Rpg.ModObjects.Actions.Activity"];
                        "text/plain": components["schemas"]["Rpg.ModObjects.Server.RpgResponse.Rpg.ModObjects.Actions.Activity"];
                    };
                };
                /** @description The resource is protected and requires an authentication token */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/rpg/{system}/activity/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    system: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["Rpg.ModObjects.Server.RpgRequest.Rpg.ModObjects.Server.Ops.ActivityCreate"];
                    "text/json": components["schemas"]["Rpg.ModObjects.Server.RpgRequest.Rpg.ModObjects.Server.Ops.ActivityCreate"];
                    "application/*+json": components["schemas"]["Rpg.ModObjects.Server.RpgRequest.Rpg.ModObjects.Server.Ops.ActivityCreate"];
                    "application/json-patch+json": components["schemas"]["Rpg.ModObjects.Server.RpgRequest.Rpg.ModObjects.Server.Ops.ActivityCreate"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        /** @description The list of notifications produced during the request. */
                        "Umb-Notifications"?: components["schemas"]["NotificationHeaderModel"][] | null;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Rpg.ModObjects.Server.RpgResponse.Rpg.ModObjects.Actions.Activity"];
                        "text/json": components["schemas"]["Rpg.ModObjects.Server.RpgResponse.Rpg.ModObjects.Actions.Activity"];
                        "text/plain": components["schemas"]["Rpg.ModObjects.Server.RpgResponse.Rpg.ModObjects.Actions.Activity"];
                    };
                };
                /** @description The resource is protected and requires an authentication token */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/rpg/{system}/activity/createbygroup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    system: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["Rpg.ModObjects.Server.RpgRequest.Rpg.ModObjects.Server.Ops.ActivityCreateByTemplate"];
                    "text/json": components["schemas"]["Rpg.ModObjects.Server.RpgRequest.Rpg.ModObjects.Server.Ops.ActivityCreateByTemplate"];
                    "application/*+json": components["schemas"]["Rpg.ModObjects.Server.RpgRequest.Rpg.ModObjects.Server.Ops.ActivityCreateByTemplate"];
                    "application/json-patch+json": components["schemas"]["Rpg.ModObjects.Server.RpgRequest.Rpg.ModObjects.Server.Ops.ActivityCreateByTemplate"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        /** @description The list of notifications produced during the request. */
                        "Umb-Notifications"?: components["schemas"]["NotificationHeaderModel"][] | null;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Rpg.ModObjects.Server.RpgResponse.Rpg.ModObjects.Actions.Activity"];
                        "text/json": components["schemas"]["Rpg.ModObjects.Server.RpgResponse.Rpg.ModObjects.Actions.Activity"];
                        "text/plain": components["schemas"]["Rpg.ModObjects.Server.RpgResponse.Rpg.ModObjects.Actions.Activity"];
                    };
                };
                /** @description The resource is protected and requires an authentication token */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/rpg/{system}/activity/outcome": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    system: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["Rpg.ModObjects.Server.RpgRequest.Rpg.ModObjects.Server.Ops.ActivityOutcome"];
                    "text/json": components["schemas"]["Rpg.ModObjects.Server.RpgRequest.Rpg.ModObjects.Server.Ops.ActivityOutcome"];
                    "application/*+json": components["schemas"]["Rpg.ModObjects.Server.RpgRequest.Rpg.ModObjects.Server.Ops.ActivityOutcome"];
                    "application/json-patch+json": components["schemas"]["Rpg.ModObjects.Server.RpgRequest.Rpg.ModObjects.Server.Ops.ActivityOutcome"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        /** @description The list of notifications produced during the request. */
                        "Umb-Notifications"?: components["schemas"]["NotificationHeaderModel"][] | null;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Rpg.ModObjects.Server.RpgResponse.Rpg.ModObjects.Actions.Activity"];
                        "text/json": components["schemas"]["Rpg.ModObjects.Server.RpgResponse.Rpg.ModObjects.Actions.Activity"];
                        "text/plain": components["schemas"]["Rpg.ModObjects.Server.RpgResponse.Rpg.ModObjects.Actions.Activity"];
                    };
                };
                /** @description The resource is protected and requires an authentication token */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/rpg/{system}/activity/templates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    system: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Rpg.Cyborgs.ActionGroups.TakeDamageGroup"][];
                        "text/json": components["schemas"]["Rpg.Cyborgs.ActionGroups.TakeDamageGroup"][];
                        "text/plain": components["schemas"]["Rpg.Cyborgs.ActionGroups.TakeDamageGroup"][];
                    };
                };
                /** @description The resource is protected and requires an authentication token */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/rpg/{system}/{archetype}/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    system: string;
                    archetype: string;
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Rpg.ModObjects.Server.RpgResponse.System.String"];
                        "text/json": components["schemas"]["Rpg.ModObjects.Server.RpgResponse.System.String"];
                        "text/plain": components["schemas"]["Rpg.ModObjects.Server.RpgResponse.System.String"];
                    };
                };
                /** @description The resource is protected and requires an authentication token */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/rpg/{system}/describe": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    system: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["Rpg.ModObjects.Server.RpgRequest.Rpg.ModObjects.Server.Ops.DescribeProp"];
                    "text/json": components["schemas"]["Rpg.ModObjects.Server.RpgRequest.Rpg.ModObjects.Server.Ops.DescribeProp"];
                    "application/*+json": components["schemas"]["Rpg.ModObjects.Server.RpgRequest.Rpg.ModObjects.Server.Ops.DescribeProp"];
                    "application/json-patch+json": components["schemas"]["Rpg.ModObjects.Server.RpgRequest.Rpg.ModObjects.Server.Ops.DescribeProp"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        /** @description The list of notifications produced during the request. */
                        "Umb-Notifications"?: components["schemas"]["NotificationHeaderModel"][] | null;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Rpg.ModObjects.Server.RpgResponse.Rpg.ModObjects.Props.PropDescription"];
                        "text/json": components["schemas"]["Rpg.ModObjects.Server.RpgResponse.Rpg.ModObjects.Props.PropDescription"];
                        "text/plain": components["schemas"]["Rpg.ModObjects.Server.RpgResponse.Rpg.ModObjects.Props.PropDescription"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        /** @description The list of notifications produced during the request. */
                        "Umb-Notifications"?: components["schemas"]["NotificationHeaderModel"][] | null;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description The resource is protected and requires an authentication token */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/rpg/{system}/entities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    system: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Rpg.ModObjects.Server.RpgContent"][];
                        "text/json": components["schemas"]["Rpg.ModObjects.Server.RpgContent"][];
                        "text/plain": components["schemas"]["Rpg.ModObjects.Server.RpgContent"][];
                    };
                };
                /** @description The resource is protected and requires an authentication token */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/rpg/{system}/modset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    system: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["Rpg.ModObjects.Server.RpgRequest.Rpg.ModObjects.Mods.ModSet"];
                    "text/json": components["schemas"]["Rpg.ModObjects.Server.RpgRequest.Rpg.ModObjects.Mods.ModSet"];
                    "application/*+json": components["schemas"]["Rpg.ModObjects.Server.RpgRequest.Rpg.ModObjects.Mods.ModSet"];
                    "application/json-patch+json": components["schemas"]["Rpg.ModObjects.Server.RpgRequest.Rpg.ModObjects.Mods.ModSet"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        /** @description The list of notifications produced during the request. */
                        "Umb-Notifications"?: components["schemas"]["NotificationHeaderModel"][] | null;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Rpg.ModObjects.Server.RpgResponse.System.Boolean"];
                        "text/json": components["schemas"]["Rpg.ModObjects.Server.RpgResponse.System.Boolean"];
                        "text/plain": components["schemas"]["Rpg.ModObjects.Server.RpgResponse.System.Boolean"];
                    };
                };
                /** @description The resource is protected and requires an authentication token */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/rpg/{system}/modset/describe": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    system: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["Rpg.ModObjects.Server.RpgRequest.Rpg.ModObjects.Server.Ops.DescribeModSet"];
                    "text/json": components["schemas"]["Rpg.ModObjects.Server.RpgRequest.Rpg.ModObjects.Server.Ops.DescribeModSet"];
                    "application/*+json": components["schemas"]["Rpg.ModObjects.Server.RpgRequest.Rpg.ModObjects.Server.Ops.DescribeModSet"];
                    "application/json-patch+json": components["schemas"]["Rpg.ModObjects.Server.RpgRequest.Rpg.ModObjects.Server.Ops.DescribeModSet"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        /** @description The list of notifications produced during the request. */
                        "Umb-Notifications"?: components["schemas"]["NotificationHeaderModel"][] | null;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Rpg.ModObjects.Server.RpgResponse.Rpg.ModObjects.Mods.ModSetDescription"];
                        "text/json": components["schemas"]["Rpg.ModObjects.Server.RpgResponse.Rpg.ModObjects.Mods.ModSetDescription"];
                        "text/plain": components["schemas"]["Rpg.ModObjects.Server.RpgResponse.Rpg.ModObjects.Mods.ModSetDescription"];
                    };
                };
                /** @description The resource is protected and requires an authentication token */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/rpg/{system}/time": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    system: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["Rpg.ModObjects.Server.RpgRequest.Rpg.ModObjects.Time.PointInTime"];
                    "text/json": components["schemas"]["Rpg.ModObjects.Server.RpgRequest.Rpg.ModObjects.Time.PointInTime"];
                    "application/*+json": components["schemas"]["Rpg.ModObjects.Server.RpgRequest.Rpg.ModObjects.Time.PointInTime"];
                    "application/json-patch+json": components["schemas"]["Rpg.ModObjects.Server.RpgRequest.Rpg.ModObjects.Time.PointInTime"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        /** @description The list of notifications produced during the request. */
                        "Umb-Notifications"?: components["schemas"]["NotificationHeaderModel"][] | null;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Rpg.ModObjects.Server.RpgResponse.Rpg.ModObjects.Time.PointInTime"];
                        "text/json": components["schemas"]["Rpg.ModObjects.Server.RpgResponse.Rpg.ModObjects.Time.PointInTime"];
                        "text/plain": components["schemas"]["Rpg.ModObjects.Server.RpgResponse.Rpg.ModObjects.Time.PointInTime"];
                    };
                };
                /** @description The resource is protected and requires an authentication token */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/rpg/document-type-updates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Rpg.ModObjects.Meta.IMetaSystem"];
                    };
                };
                /** @description The resource is protected and requires an authentication token */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description The authenticated user do not have access to this resource */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/rpg/document-types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Rpg.ModObjects.Meta.IMetaSystem"];
                    };
                };
                /** @description The resource is protected and requires an authentication token */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description The authenticated user do not have access to this resource */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/rpg/meta": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["DocumentTypeResponseModel"][];
                    };
                };
                /** @description The resource is protected and requires an authentication token */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description The authenticated user do not have access to this resource */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/rpg/sync": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        /** @description The list of notifications produced during the request. */
                        "Umb-Notifications"?: components["schemas"]["NotificationHeaderModel"][] | null;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description The resource is protected and requires an authentication token */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description The authenticated user do not have access to this resource */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/rpg/sync/{identifier}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    identifier: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        /** @description The list of notifications produced during the request. */
                        "Umb-Notifications"?: components["schemas"]["NotificationHeaderModel"][] | null;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description The resource is protected and requires an authentication token */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description The authenticated user do not have access to this resource */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found */
                404: {
                    headers: {
                        /** @description The list of notifications produced during the request. */
                        "Umb-Notifications"?: components["schemas"]["NotificationHeaderModel"][] | null;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/rpg/systems": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description The resource is protected and requires an authentication token */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description The authenticated user do not have access to this resource */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/rpg/{system}/state": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    system: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["Rpg.ModObjects.Server.RpgRequest.Rpg.ModObjects.Server.Ops.SetState"];
                    "text/json": components["schemas"]["Rpg.ModObjects.Server.RpgRequest.Rpg.ModObjects.Server.Ops.SetState"];
                    "application/*+json": components["schemas"]["Rpg.ModObjects.Server.RpgRequest.Rpg.ModObjects.Server.Ops.SetState"];
                    "application/json-patch+json": components["schemas"]["Rpg.ModObjects.Server.RpgRequest.Rpg.ModObjects.Server.Ops.SetState"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        /** @description The list of notifications produced during the request. */
                        "Umb-Notifications"?: components["schemas"]["NotificationHeaderModel"][] | null;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Rpg.ModObjects.Server.RpgResponse.System.String"];
                        "text/json": components["schemas"]["Rpg.ModObjects.Server.RpgResponse.System.String"];
                        "text/plain": components["schemas"]["Rpg.ModObjects.Server.RpgResponse.System.String"];
                    };
                };
                /** @description The resource is protected and requires an authentication token */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/rpg/{system}/state/describe": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    system: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["Rpg.ModObjects.Server.RpgRequest.Rpg.ModObjects.Server.Ops.DescribeState"];
                    "text/json": components["schemas"]["Rpg.ModObjects.Server.RpgRequest.Rpg.ModObjects.Server.Ops.DescribeState"];
                    "application/*+json": components["schemas"]["Rpg.ModObjects.Server.RpgRequest.Rpg.ModObjects.Server.Ops.DescribeState"];
                    "application/json-patch+json": components["schemas"]["Rpg.ModObjects.Server.RpgRequest.Rpg.ModObjects.Server.Ops.DescribeState"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        /** @description The list of notifications produced during the request. */
                        "Umb-Notifications"?: components["schemas"]["NotificationHeaderModel"][] | null;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Rpg.ModObjects.Server.RpgResponse.Rpg.ModObjects.Mods.ModSetDescription"];
                        "text/json": components["schemas"]["Rpg.ModObjects.Server.RpgResponse.Rpg.ModObjects.Mods.ModSetDescription"];
                        "text/plain": components["schemas"]["Rpg.ModObjects.Server.RpgResponse.Rpg.ModObjects.Mods.ModSetDescription"];
                    };
                };
                /** @description The resource is protected and requires an authentication token */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @enum {string} */
        CompositionTypeModel: "Composition" | "Inheritance";
        DocumentTypeCleanupModel: {
            preventCleanup: boolean;
            /** Format: int32 */
            keepAllVersionsNewerThanDays?: number | null;
            /** Format: int32 */
            keepLatestVersionPerDayForDays?: number | null;
        };
        DocumentTypeCompositionModel: {
            documentType: components["schemas"]["ReferenceByIdModel"];
            compositionType: components["schemas"]["CompositionTypeModel"];
        };
        DocumentTypePropertyTypeContainerResponseModel: {
            /** Format: uuid */
            id: string;
            parent: components["schemas"]["ReferenceByIdModel"];
            name?: string | null;
            type: string;
            /** Format: int32 */
            sortOrder: number;
        };
        DocumentTypePropertyTypeResponseModel: {
            /** Format: uuid */
            id: string;
            container: components["schemas"]["ReferenceByIdModel"];
            /** Format: int32 */
            sortOrder: number;
            alias: string;
            name: string;
            description?: string | null;
            dataType: components["schemas"]["ReferenceByIdModel"];
            variesByCulture: boolean;
            variesBySegment: boolean;
            validation: components["schemas"]["PropertyTypeValidationModel"];
            appearance: components["schemas"]["PropertyTypeAppearanceModel"];
        };
        DocumentTypeResponseModel: {
            alias: string;
            name: string;
            description?: string | null;
            icon: string;
            allowedAsRoot: boolean;
            variesByCulture: boolean;
            variesBySegment: boolean;
            collection: components["schemas"]["ReferenceByIdModel"];
            isElement: boolean;
            properties: components["schemas"]["DocumentTypePropertyTypeResponseModel"][];
            containers: components["schemas"]["DocumentTypePropertyTypeContainerResponseModel"][];
            /** Format: uuid */
            id: string;
            allowedTemplates: components["schemas"]["ReferenceByIdModel"][];
            defaultTemplate: components["schemas"]["ReferenceByIdModel"];
            cleanup: components["schemas"]["DocumentTypeCleanupModel"];
            allowedDocumentTypes: components["schemas"]["DocumentTypeSortModel"][];
            compositions: components["schemas"]["DocumentTypeCompositionModel"][];
        };
        DocumentTypeSortModel: {
            documentType: components["schemas"]["ReferenceByIdModel"];
            /** Format: int32 */
            sortOrder: number;
        };
        /** @enum {string} */
        EventMessageTypeModel: "Default" | "Info" | "Error" | "Success" | "Warning";
        NotificationHeaderModel: {
            message: string;
            category: string;
            type: components["schemas"]["EventMessageTypeModel"];
        };
        PropertyTypeAppearanceModel: {
            labelOnTop: boolean;
        };
        PropertyTypeValidationModel: {
            mandatory: boolean;
            mandatoryMessage?: string | null;
            regEx?: string | null;
            regExMessage?: string | null;
        };
        ReferenceByIdModel: {
            /** Format: uuid */
            id: string;
        };
        "Rpg.Cyborgs.ActionGroups.TakeDamageGroup": components["schemas"]["Rpg.ModObjects.Actions.ActivityTemplate"];
        "Rpg.Cyborgs.Actions.ArmourCheck": components["schemas"]["Rpg.ModObjects.Actions.Action.Rpg.Cyborgs.Actor"];
        "Rpg.Cyborgs.Actions.MeleeAttack": components["schemas"]["Rpg.ModObjects.Actions.Action.Rpg.Cyborgs.MeleeWeapon"];
        "Rpg.Cyborgs.Actions.MeleeParry": components["schemas"]["Rpg.ModObjects.Actions.Action.Rpg.Cyborgs.Actor"];
        "Rpg.Cyborgs.Actions.RangedAttack": components["schemas"]["Rpg.ModObjects.Actions.Action.Rpg.Cyborgs.MeleeWeapon"];
        "Rpg.Cyborgs.Actions.TakeDamage": components["schemas"]["Rpg.ModObjects.Actions.Action.Rpg.Cyborgs.Actor"];
        "Rpg.Cyborgs.Actions.Transfer": components["schemas"]["Rpg.ModObjects.Actions.Action.Rpg.ModObjects.RpgEntity"];
        "Rpg.Cyborgs.Actor": {
            strength: components["schemas"]["Rpg.Cyborgs.Components.PropValue"];
            agility: components["schemas"]["Rpg.Cyborgs.Components.PropValue"];
            health: components["schemas"]["Rpg.Cyborgs.Components.PropValue"];
            brains: components["schemas"]["Rpg.Cyborgs.Components.PropValue"];
            insight: components["schemas"]["Rpg.Cyborgs.Components.PropValue"];
            charisma: components["schemas"]["Rpg.Cyborgs.Components.PropValue"];
            /** Format: int32 */
            readonly focusPoints: number;
            /** Format: int32 */
            readonly currentFocusPoints: number;
            /** Format: int32 */
            readonly luckPoints: number;
            /** Format: int32 */
            readonly currentLuckPoints: number;
            /** Format: int32 */
            readonly staminaPoints: number;
            /** Format: int32 */
            readonly currentStaminaPoints: number;
            /** Format: int32 */
            readonly lifePoints: number;
            /** Format: int32 */
            readonly currentLifePoints: number;
            /** Format: int32 */
            readonly actionPoints: number;
            /** Format: int32 */
            readonly currentActionPoints: number;
            head: components["schemas"]["Rpg.Cyborgs.BodyPart"];
            torso: components["schemas"]["Rpg.Cyborgs.BodyPart"];
            leftArm: components["schemas"]["Rpg.Cyborgs.BodyPart"];
            rightArm: components["schemas"]["Rpg.Cyborgs.BodyPart"];
            leftLeg: components["schemas"]["Rpg.Cyborgs.BodyPart"];
            rightLeg: components["schemas"]["Rpg.Cyborgs.BodyPart"];
            reactions: components["schemas"]["Rpg.Cyborgs.Components.PropValue"];
            defence: components["schemas"]["Rpg.Cyborgs.Components.PropValue"];
            armourRating: components["schemas"]["Rpg.Cyborgs.Components.PropValue"];
            unarmedDamageBonus: components["schemas"]["Rpg.Cyborgs.Components.PropValue"];
            parryDamageReduction: components["schemas"]["Rpg.Cyborgs.Components.PropValue"];
            rangedAttack: components["schemas"]["Rpg.Cyborgs.Components.PropValue"];
            rangedAimBonus: components["schemas"]["Rpg.Cyborgs.Components.PropValue"];
            meleeAttack: components["schemas"]["Rpg.Cyborgs.Components.PropValue"];
            hands: components["schemas"]["Rpg.ModObjects.RpgContainer"];
            wearing: components["schemas"]["Rpg.ModObjects.RpgContainer"];
        } & components["schemas"]["Rpg.ModObjects.RpgEntity"];
        "Rpg.Cyborgs.Armour": {
            /** Format: int32 */
            readonly armourRating: number;
            /** Format: int32 */
            readonly currentArmourRating: number;
            /** Format: int32 */
            readonly defenceModifier: number;
        } & components["schemas"]["Rpg.ModObjects.RpgEntity"];
        "Rpg.Cyborgs.BodyPart": {
            /** Format: int32 */
            readonly injurySeverity: number;
            readonly injuries: components["schemas"]["Rpg.Cyborgs.Injury"][];
            bodyPartType: components["schemas"]["Rpg.Cyborgs.BodyPartType"];
        } & components["schemas"]["Rpg.ModObjects.RpgComponent"];
        /** @enum {string} */
        "Rpg.Cyborgs.BodyPartType": "Limb" | "Torso" | "Head";
        "Rpg.Cyborgs.Components.PropValue": {
            /** Format: int32 */
            value: number;
            /** Format: int32 */
            readonly initValue: number;
            /** Format: int32 */
            readonly baseValue: number;
        } & components["schemas"]["Rpg.ModObjects.RpgComponent"];
        "Rpg.Cyborgs.Conditions.Attachable": components["schemas"]["Rpg.Cyborgs.Conditions.Condition.Rpg.Cyborgs.BodyPart"];
        "Rpg.Cyborgs.Conditions.Bleeding": components["schemas"]["Rpg.Cyborgs.Conditions.Condition.Rpg.Cyborgs.BodyPart"];
        "Rpg.Cyborgs.Conditions.Condition.Rpg.Cyborgs.Actor": {
            expiry: components["schemas"]["Rpg.ModObjects.Time.LifecycleExpiry"];
            readonly id: string;
            readonly name: string;
            readonly ownerId: string;
            readonly ownerArchetype?: string | null;
            readonly isPlayerVisible: boolean;
            readonly isOn: boolean;
            readonly onByTimePeriod: boolean;
            readonly onByUserAction: boolean;
            readonly onByCondition: boolean;
            removeOnActions: string[];
        };
        "Rpg.Cyborgs.Conditions.Condition.Rpg.Cyborgs.BodyPart": {
            expiry: components["schemas"]["Rpg.ModObjects.Time.LifecycleExpiry"];
            readonly id: string;
            readonly name: string;
            readonly ownerId: string;
            readonly ownerArchetype?: string | null;
            readonly isPlayerVisible: boolean;
            readonly isOn: boolean;
            readonly onByTimePeriod: boolean;
            readonly onByUserAction: boolean;
            readonly onByCondition: boolean;
            removeOnActions: string[];
        };
        "Rpg.Cyborgs.Conditions.Condition.Rpg.Cyborgs.Conditions.T": {
            removeOnActions: string[];
        } & components["schemas"]["Rpg.ModObjects.States.State.Rpg.Cyborgs.Conditions.T"];
        "Rpg.Cyborgs.Conditions.Dead": components["schemas"]["Rpg.Cyborgs.Conditions.Condition.Rpg.Cyborgs.BodyPart"];
        "Rpg.Cyborgs.Conditions.Dying": components["schemas"]["Rpg.Cyborgs.Conditions.Condition.Rpg.Cyborgs.Actor"];
        "Rpg.Cyborgs.Conditions.Fixable": components["schemas"]["Rpg.Cyborgs.Conditions.Condition.Rpg.Cyborgs.BodyPart"];
        "Rpg.Cyborgs.Conditions.Pain": components["schemas"]["Rpg.Cyborgs.Conditions.Condition.Rpg.Cyborgs.BodyPart"];
        "Rpg.Cyborgs.Conditions.Repairable": components["schemas"]["Rpg.Cyborgs.Conditions.Condition.Rpg.Cyborgs.BodyPart"];
        "Rpg.Cyborgs.Conditions.Replaceable": components["schemas"]["Rpg.Cyborgs.Conditions.Condition.Rpg.Cyborgs.BodyPart"];
        "Rpg.Cyborgs.Conditions.Shock": components["schemas"]["Rpg.Cyborgs.Conditions.Condition.Rpg.Cyborgs.BodyPart"];
        "Rpg.Cyborgs.Conditions.Treatable": components["schemas"]["Rpg.Cyborgs.Conditions.Condition.Rpg.Cyborgs.BodyPart"];
        "Rpg.Cyborgs.Conditions.Unconscious": components["schemas"]["Rpg.Cyborgs.Conditions.Condition.Rpg.Cyborgs.Actor"];
        "Rpg.Cyborgs.Conditions.Unusable": components["schemas"]["Rpg.Cyborgs.Conditions.Condition.Rpg.Cyborgs.BodyPart"];
        "Rpg.Cyborgs.Injury": {
            id: string;
            bodyPartType: components["schemas"]["Rpg.Cyborgs.BodyPartType"];
            /** Format: int32 */
            severity: number;
        } & components["schemas"]["Rpg.ModObjects.RpgLifecycleObject"];
        "Rpg.Cyborgs.MeleeWeapon": {
            damage: components["schemas"]["Rpg.ModObjects.Values.Dice"];
            /** Format: int32 */
            readonly hitBonus: number;
        } & components["schemas"]["Rpg.ModObjects.RpgEntity"];
        "Rpg.Cyborgs.PlayerCharacter": components["schemas"]["Rpg.Cyborgs.Actor"];
        "Rpg.Cyborgs.RangedWeapon": {
            damage: components["schemas"]["Rpg.ModObjects.Values.Dice"];
            /** Format: int32 */
            readonly hitBonus: number;
        } & components["schemas"]["Rpg.ModObjects.RpgEntity"];
        "Rpg.Cyborgs.Skills.Combat.Aim": components["schemas"]["Rpg.Cyborgs.Skills.Skill"];
        "Rpg.Cyborgs.Skills.Movement.Run": components["schemas"]["Rpg.Cyborgs.Skills.Skill"];
        "Rpg.Cyborgs.Skills.Skill": {
            /** Format: int32 */
            rating: number;
            readonly isIntrinsic: boolean;
        } & components["schemas"]["Rpg.ModObjects.Actions.Action.Rpg.Cyborgs.Actor"];
        "Rpg.Cyborgs.States.Aiming": components["schemas"]["Rpg.ModObjects.States.State.Rpg.Cyborgs.Actor"];
        "Rpg.Cyborgs.States.Exhausted": components["schemas"]["Rpg.ModObjects.States.State.Rpg.Cyborgs.Actor"];
        "Rpg.Cyborgs.States.Firing": components["schemas"]["Rpg.ModObjects.States.State.Rpg.Cyborgs.RangedWeapon"];
        "Rpg.Cyborgs.States.MeleeAttacked": components["schemas"]["Rpg.ModObjects.States.State.Rpg.Cyborgs.Actor"];
        "Rpg.Cyborgs.States.MeleeAttacking": components["schemas"]["Rpg.ModObjects.States.State.Rpg.Cyborgs.Actor"];
        "Rpg.Cyborgs.States.Moving": components["schemas"]["Rpg.ModObjects.States.State.Rpg.Cyborgs.Actor"];
        "Rpg.Cyborgs.States.Parrying": components["schemas"]["Rpg.ModObjects.States.State.Rpg.Cyborgs.Actor"];
        "Rpg.Cyborgs.States.RangedAttacking": components["schemas"]["Rpg.ModObjects.States.State.Rpg.Cyborgs.Actor"];
        "Rpg.Cyborgs.States.VeryFast": components["schemas"]["Rpg.ModObjects.States.State.Rpg.Cyborgs.Actor"];
        "Rpg.ModObjects.Actions.Action": {
            readonly id: string;
            readonly name: string;
            readonly ownerId: string;
            readonly ownerArchetype: string;
            onCanAct: components["schemas"]["Rpg.ModObjects.Reflection.RpgMethod.Rpg.ModObjects.Actions.Action.System.Boolean"];
            onCost: components["schemas"]["Rpg.ModObjects.Reflection.RpgMethod.Rpg.ModObjects.Actions.Action.System.Boolean"];
            onAct: components["schemas"]["Rpg.ModObjects.Reflection.RpgMethod.Rpg.ModObjects.Actions.Action.System.Boolean"];
            onOutcome: components["schemas"]["Rpg.ModObjects.Reflection.RpgMethod.Rpg.ModObjects.Actions.Action.System.Boolean"];
            readonly canPerformAfter: string[];
        };
        "Rpg.ModObjects.Actions.Action.Rpg.Cyborgs.Actor": {
            readonly id: string;
            readonly name: string;
            readonly ownerId: string;
            readonly ownerArchetype: string;
            onCanAct: components["schemas"]["Rpg.ModObjects.Reflection.RpgMethod.Rpg.ModObjects.Actions.Action.System.Boolean"];
            onCost: components["schemas"]["Rpg.ModObjects.Reflection.RpgMethod.Rpg.ModObjects.Actions.Action.System.Boolean"];
            onAct: components["schemas"]["Rpg.ModObjects.Reflection.RpgMethod.Rpg.ModObjects.Actions.Action.System.Boolean"];
            onOutcome: components["schemas"]["Rpg.ModObjects.Reflection.RpgMethod.Rpg.ModObjects.Actions.Action.System.Boolean"];
            readonly canPerformAfter: string[];
        };
        "Rpg.ModObjects.Actions.Action.Rpg.Cyborgs.MeleeWeapon": {
            readonly id: string;
            readonly name: string;
            readonly ownerId: string;
            readonly ownerArchetype: string;
            onCanAct: components["schemas"]["Rpg.ModObjects.Reflection.RpgMethod.Rpg.ModObjects.Actions.Action.System.Boolean"];
            onCost: components["schemas"]["Rpg.ModObjects.Reflection.RpgMethod.Rpg.ModObjects.Actions.Action.System.Boolean"];
            onAct: components["schemas"]["Rpg.ModObjects.Reflection.RpgMethod.Rpg.ModObjects.Actions.Action.System.Boolean"];
            onOutcome: components["schemas"]["Rpg.ModObjects.Reflection.RpgMethod.Rpg.ModObjects.Actions.Action.System.Boolean"];
            readonly canPerformAfter: string[];
        };
        "Rpg.ModObjects.Actions.Action.Rpg.ModObjects.Actions.TOwner": components["schemas"]["Rpg.ModObjects.Actions.Action"];
        "Rpg.ModObjects.Actions.Action.Rpg.ModObjects.RpgEntity": {
            readonly id: string;
            readonly name: string;
            readonly ownerId: string;
            readonly ownerArchetype: string;
            onCanAct: components["schemas"]["Rpg.ModObjects.Reflection.RpgMethod.Rpg.ModObjects.Actions.Action.System.Boolean"];
            onCost: components["schemas"]["Rpg.ModObjects.Reflection.RpgMethod.Rpg.ModObjects.Actions.Action.System.Boolean"];
            onAct: components["schemas"]["Rpg.ModObjects.Reflection.RpgMethod.Rpg.ModObjects.Actions.Action.System.Boolean"];
            onOutcome: components["schemas"]["Rpg.ModObjects.Reflection.RpgMethod.Rpg.ModObjects.Actions.Action.System.Boolean"];
            readonly canPerformAfter: string[];
        };
        "Rpg.ModObjects.Actions.ActionInstance": {
            owner?: (components["schemas"]["Rpg.Cyborgs.Actor"] | components["schemas"]["Rpg.Cyborgs.Armour"] | components["schemas"]["Rpg.Cyborgs.MeleeWeapon"] | components["schemas"]["Rpg.Cyborgs.PlayerCharacter"] | components["schemas"]["Rpg.Cyborgs.RangedWeapon"]) | null;
            action?: (components["schemas"]["Rpg.Cyborgs.Skills.Skill"] | components["schemas"]["Rpg.Cyborgs.Skills.Movement.Run"] | components["schemas"]["Rpg.Cyborgs.Skills.Combat.Aim"] | components["schemas"]["Rpg.Cyborgs.Actions.ArmourCheck"] | components["schemas"]["Rpg.Cyborgs.Actions.MeleeAttack"] | components["schemas"]["Rpg.Cyborgs.Actions.MeleeParry"] | components["schemas"]["Rpg.Cyborgs.Actions.RangedAttack"] | components["schemas"]["Rpg.Cyborgs.Actions.TakeDamage"] | components["schemas"]["Rpg.Cyborgs.Actions.Transfer"] | components["schemas"]["Rpg.ModObjects.Actions.Action.Rpg.ModObjects.Actions.TOwner"]) | null;
            readonly ownerId: string;
            readonly actionName: string;
            /** Format: int32 */
            actionNo: number;
            readonly canActArgs: {
                [key: string]: unknown;
            };
            readonly costArgs: {
                [key: string]: unknown;
            };
            readonly actArgs: {
                [key: string]: unknown;
            };
            readonly outcomeArgs: {
                [key: string]: unknown;
            };
            readonly args: {
                [key: string]: (components["schemas"]["Rpg.ModObjects.Reflection.Args.DefaultArg"] | components["schemas"]["Rpg.ModObjects.Reflection.Args.DiceArg"] | components["schemas"]["Rpg.ModObjects.Reflection.Args.IntegerArg"] | components["schemas"]["Rpg.ModObjects.Reflection.Args.RpgObjectArg"]) | undefined;
            };
        };
        "Rpg.ModObjects.Actions.Activity": {
            readonly initiator?: (components["schemas"]["Rpg.Cyborgs.Actor"] | components["schemas"]["Rpg.Cyborgs.Armour"] | components["schemas"]["Rpg.Cyborgs.MeleeWeapon"] | components["schemas"]["Rpg.Cyborgs.PlayerCharacter"] | components["schemas"]["Rpg.Cyborgs.RangedWeapon"]) | null;
            readonly initiatorId: string;
            time: components["schemas"]["Rpg.ModObjects.Time.PointInTime"];
            /** Format: int32 */
            readonly activityNo: number;
            /** Format: int32 */
            readonly nextActionNo: number;
            readonly actionInstances: components["schemas"]["Rpg.ModObjects.Actions.ActionInstance"][];
            actionInstance: components["schemas"]["Rpg.ModObjects.Actions.ActionInstance"];
            outputSets: (components["schemas"]["Rpg.ModObjects.Mods.ModSet"] | components["schemas"]["Rpg.ModObjects.Mods.ModSets.StateModSet"] | components["schemas"]["Rpg.ModObjects.Mods.ModSets.SyncedModSet"] | components["schemas"]["Rpg.ModObjects.Mods.ModSets.TimedModSet"] | components["schemas"]["Rpg.ModObjects.Mods.ModSets.TurnModSet"])[];
            readonly outcomeSet: components["schemas"]["Rpg.ModObjects.Mods.ModSet"] | components["schemas"]["Rpg.ModObjects.Mods.ModSets.StateModSet"] | components["schemas"]["Rpg.ModObjects.Mods.ModSets.SyncedModSet"] | components["schemas"]["Rpg.ModObjects.Mods.ModSets.TimedModSet"] | components["schemas"]["Rpg.ModObjects.Mods.ModSets.TurnModSet"];
            readonly costSet: components["schemas"]["Rpg.ModObjects.Mods.ModSet"] | components["schemas"]["Rpg.ModObjects.Mods.ModSets.StateModSet"] | components["schemas"]["Rpg.ModObjects.Mods.ModSets.SyncedModSet"] | components["schemas"]["Rpg.ModObjects.Mods.ModSets.TimedModSet"] | components["schemas"]["Rpg.ModObjects.Mods.ModSets.TurnModSet"];
        } & components["schemas"]["Rpg.ModObjects.RpgObject"];
        "Rpg.ModObjects.Actions.ActivityTemplate": {
            readonly name: string;
            readonly items: components["schemas"]["Rpg.ModObjects.Actions.ActivityTemplateItem"][];
        };
        "Rpg.ModObjects.Actions.ActivityTemplateItem": {
            ownerArchetype: string;
            actionName: string;
            optional: boolean;
        };
        "Rpg.ModObjects.Behaviors.Add": components["schemas"]["Rpg.ModObjects.Behaviors.BaseBehavior"];
        "Rpg.ModObjects.Behaviors.BaseBehavior": {
            scope: components["schemas"]["Rpg.ModObjects.Mods.ModScope"];
        };
        "Rpg.ModObjects.Behaviors.Combine": components["schemas"]["Rpg.ModObjects.Behaviors.BaseBehavior"];
        "Rpg.ModObjects.Behaviors.ExpiresOn": {
            value: components["schemas"]["Rpg.ModObjects.Values.Dice"];
        } & components["schemas"]["Rpg.ModObjects.Behaviors.BaseBehavior"];
        "Rpg.ModObjects.Behaviors.Highest": components["schemas"]["Rpg.ModObjects.Behaviors.BaseBehavior"];
        "Rpg.ModObjects.Behaviors.Replace": components["schemas"]["Rpg.ModObjects.Behaviors.BaseBehavior"];
        "Rpg.ModObjects.Behaviors.Threshold": {
            /** Format: int32 */
            min: number;
            /** Format: int32 */
            max: number;
        } & components["schemas"]["Rpg.ModObjects.Behaviors.BaseBehavior"];
        /** @enum {string} */
        "Rpg.ModObjects.Meta.EditorType": "Int32" | "Text" | "RichText" | "Boolean" | "Select" | "CheckBoxList" | "Container" | "LongText";
        "Rpg.ModObjects.Meta.IMetaSystem": {
            readonly identifier: string;
            namespaces?: string[] | null;
            readonly name: string;
            readonly version: string;
            readonly description: string;
            objects: (components["schemas"]["Rpg.ModObjects.Meta.MetaObj"] | components["schemas"]["Rpg.ModObjects.Meta.MetaContainer"])[];
            actions: components["schemas"]["Rpg.ModObjects.Meta.MetaAction"][];
            states: components["schemas"]["Rpg.ModObjects.Meta.MetaState"][];
            propUIs: {
                [key: string]: unknown;
            }[];
            activityTemplates: components["schemas"]["Rpg.Cyborgs.ActionGroups.TakeDamageGroup"][];
        };
        "Rpg.ModObjects.Meta.MetaAction": {
            readonly name: string;
            readonly ownerArchetype: string;
            readonly required: boolean;
            readonly category?: string | null;
            readonly subCategory?: string | null;
            readonly nextActionHints?: string[] | null;
        };
        "Rpg.ModObjects.Meta.MetaContainer": {
            name: string;
        } & components["schemas"]["Rpg.ModObjects.Meta.MetaObj"];
        "Rpg.ModObjects.Meta.MetaObj": {
            readonly archetype: string;
            readonly qualifiedClassName?: string | null;
            readonly archetypes: string[];
            readonly icon?: string | null;
            props: components["schemas"]["Rpg.ModObjects.Meta.MetaProp"][];
            readonly allowedAsRoot: boolean;
            readonly allowedChildArchetypes: string[];
            allowedActions: components["schemas"]["Rpg.ModObjects.Meta.MetaAction"][];
            allowedStates: components["schemas"]["Rpg.ModObjects.Meta.MetaState"][];
            containers: components["schemas"]["Rpg.ModObjects.Meta.MetaContainer"][];
            readonly isElement: boolean;
        };
        "Rpg.ModObjects.Meta.MetaProp": {
            prop: string;
            readonly fullProp: string;
            path: string[];
            displayName: string;
            dataTypeName: string;
            editor: components["schemas"]["Rpg.ModObjects.Meta.EditorType"];
            tab: string;
            group: string;
            ignore: boolean;
        };
        "Rpg.ModObjects.Meta.MetaState": {
            readonly name: string;
            readonly archetype: string;
            readonly required: boolean;
            readonly hidden: boolean;
            readonly category?: string | null;
            readonly subCategory?: string | null;
        };
        "Rpg.ModObjects.Mods.Mod": {
            id: string;
            readonly ownerId?: string | null;
            readonly entityId: string;
            readonly prop: string;
            readonly name: string;
            readonly behavior: components["schemas"]["Rpg.ModObjects.Behaviors.Add"] | components["schemas"]["Rpg.ModObjects.Behaviors.Combine"] | components["schemas"]["Rpg.ModObjects.Behaviors.ExpiresOn"] | components["schemas"]["Rpg.ModObjects.Behaviors.Highest"] | components["schemas"]["Rpg.ModObjects.Behaviors.Replace"] | components["schemas"]["Rpg.ModObjects.Behaviors.Threshold"];
            target: components["schemas"]["Rpg.ModObjects.Props.PropRef"];
            source: components["schemas"]["Rpg.ModObjects.Props.PropRef"];
            sourceValue: components["schemas"]["Rpg.ModObjects.Values.Dice"];
            readonly isBaseInitMod: boolean;
            readonly isBaseOverrideMod: boolean;
            readonly isBaseMod: boolean;
            readonly isApplied: boolean;
            readonly isDisabled: boolean;
            readonly isActive: boolean;
            readonly isPending: boolean;
            readonly isExpired: boolean;
        } & components["schemas"]["Rpg.ModObjects.RpgLifecycleObject"];
        /** @enum {string} */
        "Rpg.ModObjects.Mods.ModScope": "Standard" | "ParentEntity" | "ChildComponents" | "ChildObjects";
        "Rpg.ModObjects.Mods.ModSet": {
            readonly id: string;
            ownerId?: string | null;
            name: string;
            readonly isApplied: boolean;
            readonly isDisabled: boolean;
            readonly isActive: boolean;
            readonly mods: (components["schemas"]["Rpg.ModObjects.Mods.Mods.Base"] | components["schemas"]["Rpg.ModObjects.Mods.Mods.Encounter"] | components["schemas"]["Rpg.ModObjects.Mods.Mods.Initial"] | components["schemas"]["Rpg.ModObjects.Mods.Mods.Override"] | components["schemas"]["Rpg.ModObjects.Mods.Mods.Permanent"] | components["schemas"]["Rpg.ModObjects.Mods.Mods.Synced"] | components["schemas"]["Rpg.ModObjects.Mods.Mods.Threshold"] | components["schemas"]["Rpg.ModObjects.Mods.Mods.Time"] | components["schemas"]["Rpg.ModObjects.Mods.Mods.Turn"])[];
        } & components["schemas"]["Rpg.ModObjects.RpgLifecycleObject"];
        "Rpg.ModObjects.Mods.ModSetDescription": {
            name: string;
            readonly values: {
                [key: string]: components["schemas"]["Rpg.ModObjects.Values.Dice"] | undefined;
            };
        };
        "Rpg.ModObjects.Mods.ModSets.StateModSet": {
            stateName: string;
        } & components["schemas"]["Rpg.ModObjects.Mods.ModSet"];
        "Rpg.ModObjects.Mods.ModSets.SyncedModSet": {
            syncedToId: string;
        } & components["schemas"]["Rpg.ModObjects.Mods.ModSet"];
        "Rpg.ModObjects.Mods.ModSets.TimedModSet": components["schemas"]["Rpg.ModObjects.Mods.ModSet"];
        "Rpg.ModObjects.Mods.ModSets.TurnModSet": components["schemas"]["Rpg.ModObjects.Mods.ModSets.TimedModSet"];
        "Rpg.ModObjects.Mods.Mods.Base": components["schemas"]["Rpg.ModObjects.Mods.Mods.Permanent"];
        "Rpg.ModObjects.Mods.Mods.Encounter": components["schemas"]["Rpg.ModObjects.Mods.Mods.Time"];
        "Rpg.ModObjects.Mods.Mods.Initial": components["schemas"]["Rpg.ModObjects.Mods.Mod"];
        "Rpg.ModObjects.Mods.Mods.Override": components["schemas"]["Rpg.ModObjects.Mods.Mod"];
        "Rpg.ModObjects.Mods.Mods.Permanent": components["schemas"]["Rpg.ModObjects.Mods.Mod"];
        "Rpg.ModObjects.Mods.Mods.Synced": components["schemas"]["Rpg.ModObjects.Mods.Mod"];
        "Rpg.ModObjects.Mods.Mods.Threshold": components["schemas"]["Rpg.ModObjects.Mods.Mod"];
        "Rpg.ModObjects.Mods.Mods.Time": components["schemas"]["Rpg.ModObjects.Mods.Mod"];
        "Rpg.ModObjects.Mods.Mods.Turn": components["schemas"]["Rpg.ModObjects.Mods.Mods.Time"];
        "Rpg.ModObjects.Props.ModDescription": {
            sourceProp: components["schemas"]["Rpg.ModObjects.Props.PropDescription"];
            modType: string;
            behavior: string;
            sourceValue: components["schemas"]["Rpg.ModObjects.Values.Dice"];
            value: components["schemas"]["Rpg.ModObjects.Values.Dice"];
            valueFunction?: string | null;
        };
        "Rpg.ModObjects.Props.Prop": {
            readonly entityId: string;
            readonly name: string;
            refType: components["schemas"]["Rpg.ModObjects.Props.RefType"];
            readonly mods: (components["schemas"]["Rpg.ModObjects.Mods.Mods.Base"] | components["schemas"]["Rpg.ModObjects.Mods.Mods.Encounter"] | components["schemas"]["Rpg.ModObjects.Mods.Mods.Initial"] | components["schemas"]["Rpg.ModObjects.Mods.Mods.Override"] | components["schemas"]["Rpg.ModObjects.Mods.Mods.Permanent"] | components["schemas"]["Rpg.ModObjects.Mods.Mods.Synced"] | components["schemas"]["Rpg.ModObjects.Mods.Mods.Threshold"] | components["schemas"]["Rpg.ModObjects.Mods.Mods.Time"] | components["schemas"]["Rpg.ModObjects.Mods.Mods.Turn"])[];
            readonly refs: components["schemas"]["Rpg.ModObjects.Props.PropObjRef"][];
        } & components["schemas"]["Rpg.ModObjects.RpgLifecycleObject"];
        "Rpg.ModObjects.Props.PropDescription": {
            rootEntityId: string;
            rootEntityName: string;
            rootEntityArchetype: string;
            rootProp: string;
            entityId: string;
            entityName: string;
            entityArchetype: string;
            prop: string;
            value: components["schemas"]["Rpg.ModObjects.Values.Dice"];
            baseValue: components["schemas"]["Rpg.ModObjects.Values.Dice"];
            mods: components["schemas"]["Rpg.ModObjects.Props.ModDescription"][];
        };
        "Rpg.ModObjects.Props.PropObjRef": {
            entityId: string;
            ownerId?: string | null;
        } & components["schemas"]["Rpg.ModObjects.RpgLifecycleObject"];
        "Rpg.ModObjects.Props.PropRef": {
            entityId: string;
            prop: string;
        };
        /** @enum {string} */
        "Rpg.ModObjects.Props.RefType": "Value" | "Child" | "Children";
        "Rpg.ModObjects.Reflection.Args.DefaultArg": components["schemas"]["Rpg.ModObjects.Reflection.Args.RpgArg"];
        "Rpg.ModObjects.Reflection.Args.DiceArg": components["schemas"]["Rpg.ModObjects.Reflection.Args.RpgArg"];
        "Rpg.ModObjects.Reflection.Args.IntegerArg": components["schemas"]["Rpg.ModObjects.Reflection.Args.RpgArg"];
        "Rpg.ModObjects.Reflection.Args.RpgArg": {
            readonly name: string;
            readonly typeName: string;
            readonly qualifiedTypeName: string;
            readonly isNullable: boolean;
        };
        "Rpg.ModObjects.Reflection.Args.RpgObjectArg": {
            forArgName?: string | null;
            archetype: string;
        } & components["schemas"]["Rpg.ModObjects.Reflection.Args.RpgArg"];
        "Rpg.ModObjects.Reflection.RpgMethod.Rpg.ModObjects.Actions.Action.System.Boolean": {
            readonly entityId?: string | null;
            readonly className?: string | null;
            readonly methodName: string;
            readonly returnTypeName?: string | null;
            readonly returnQualifiedTypeName?: string | null;
            readonly returnIsNullable: boolean;
            readonly args: (components["schemas"]["Rpg.ModObjects.Reflection.Args.DefaultArg"] | components["schemas"]["Rpg.ModObjects.Reflection.Args.DiceArg"] | components["schemas"]["Rpg.ModObjects.Reflection.Args.IntegerArg"] | components["schemas"]["Rpg.ModObjects.Reflection.Args.RpgObjectArg"])[];
            readonly fullName: string;
            readonly isStatic: boolean;
        };
        "Rpg.ModObjects.RpgComponent": components["schemas"]["Rpg.ModObjects.RpgObject"];
        "Rpg.ModObjects.RpgContainer": {
            readonly contents: (components["schemas"]["Rpg.Cyborgs.Actor"] | components["schemas"]["Rpg.Cyborgs.Armour"] | components["schemas"]["Rpg.Cyborgs.BodyPart"] | components["schemas"]["Rpg.Cyborgs.MeleeWeapon"] | components["schemas"]["Rpg.Cyborgs.PlayerCharacter"] | components["schemas"]["Rpg.Cyborgs.RangedWeapon"] | components["schemas"]["Rpg.Cyborgs.Components.PropValue"] | components["schemas"]["Rpg.ModObjects.RpgComponent"] | components["schemas"]["Rpg.ModObjects.RpgContainer"] | components["schemas"]["Rpg.ModObjects.RpgEntity"] | components["schemas"]["Rpg.ModObjects.Actions.Activity"])[];
        } & components["schemas"]["Rpg.ModObjects.RpgComponent"];
        "Rpg.ModObjects.RpgEntity": {
            readonly actions: {
                [key: string]: (components["schemas"]["Rpg.Cyborgs.Skills.Skill"] | components["schemas"]["Rpg.Cyborgs.Skills.Movement.Run"] | components["schemas"]["Rpg.Cyborgs.Skills.Combat.Aim"] | components["schemas"]["Rpg.Cyborgs.Actions.ArmourCheck"] | components["schemas"]["Rpg.Cyborgs.Actions.MeleeAttack"] | components["schemas"]["Rpg.Cyborgs.Actions.MeleeParry"] | components["schemas"]["Rpg.Cyborgs.Actions.RangedAttack"] | components["schemas"]["Rpg.Cyborgs.Actions.TakeDamage"] | components["schemas"]["Rpg.Cyborgs.Actions.Transfer"] | components["schemas"]["Rpg.ModObjects.Actions.Action.Rpg.ModObjects.Actions.TOwner"]) | undefined;
            };
        } & components["schemas"]["Rpg.ModObjects.RpgObject"];
        "Rpg.ModObjects.RpgGraphState": {
            entities: (components["schemas"]["Rpg.Cyborgs.Actor"] | components["schemas"]["Rpg.Cyborgs.Armour"] | components["schemas"]["Rpg.Cyborgs.BodyPart"] | components["schemas"]["Rpg.Cyborgs.MeleeWeapon"] | components["schemas"]["Rpg.Cyborgs.PlayerCharacter"] | components["schemas"]["Rpg.Cyborgs.RangedWeapon"] | components["schemas"]["Rpg.Cyborgs.Components.PropValue"] | components["schemas"]["Rpg.ModObjects.RpgComponent"] | components["schemas"]["Rpg.ModObjects.RpgContainer"] | components["schemas"]["Rpg.ModObjects.RpgEntity"] | components["schemas"]["Rpg.ModObjects.Actions.Activity"])[];
            contextId?: string | null;
            time: components["schemas"]["Rpg.ModObjects.Time.Temporal"];
        };
        "Rpg.ModObjects.RpgLifecycleObject": {
            expiry: components["schemas"]["Rpg.ModObjects.Time.LifecycleExpiry"];
        };
        "Rpg.ModObjects.RpgObject": {
            modSets: {
                [key: string]: (components["schemas"]["Rpg.ModObjects.Mods.ModSet"] | components["schemas"]["Rpg.ModObjects.Mods.ModSets.StateModSet"] | components["schemas"]["Rpg.ModObjects.Mods.ModSets.SyncedModSet"] | components["schemas"]["Rpg.ModObjects.Mods.ModSets.TimedModSet"] | components["schemas"]["Rpg.ModObjects.Mods.ModSets.TurnModSet"]) | undefined;
            };
            props: {
                [key: string]: components["schemas"]["Rpg.ModObjects.Props.Prop"] | undefined;
            };
            states: {
                [key: string]: (components["schemas"]["Rpg.Cyborgs.States.Aiming"] | components["schemas"]["Rpg.Cyborgs.States.Exhausted"] | components["schemas"]["Rpg.Cyborgs.States.Firing"] | components["schemas"]["Rpg.Cyborgs.States.MeleeAttacked"] | components["schemas"]["Rpg.Cyborgs.States.MeleeAttacking"] | components["schemas"]["Rpg.Cyborgs.States.Moving"] | components["schemas"]["Rpg.Cyborgs.States.Parrying"] | components["schemas"]["Rpg.Cyborgs.States.RangedAttacking"] | components["schemas"]["Rpg.Cyborgs.States.VeryFast"] | components["schemas"]["Rpg.Cyborgs.Conditions.Attachable"] | components["schemas"]["Rpg.Cyborgs.Conditions.Bleeding"] | components["schemas"]["Rpg.Cyborgs.Conditions.Condition.Rpg.Cyborgs.Conditions.T"] | components["schemas"]["Rpg.Cyborgs.Conditions.Dead"] | components["schemas"]["Rpg.Cyborgs.Conditions.Dying"] | components["schemas"]["Rpg.Cyborgs.Conditions.Fixable"] | components["schemas"]["Rpg.Cyborgs.Conditions.Pain"] | components["schemas"]["Rpg.Cyborgs.Conditions.Repairable"] | components["schemas"]["Rpg.Cyborgs.Conditions.Replaceable"] | components["schemas"]["Rpg.Cyborgs.Conditions.Shock"] | components["schemas"]["Rpg.Cyborgs.Conditions.Treatable"] | components["schemas"]["Rpg.Cyborgs.Conditions.Unconscious"] | components["schemas"]["Rpg.Cyborgs.Conditions.Unusable"] | components["schemas"]["Rpg.ModObjects.States.State.Rpg.ModObjects.States.T"]) | undefined;
            };
            readonly id: string;
            readonly archetype: string;
            readonly name: string;
            readonly archetypes: string[];
        } & components["schemas"]["Rpg.ModObjects.RpgLifecycleObject"];
        "Rpg.ModObjects.Server.Ops.ActivityAct": {
            activityId: string;
            args: {
                [key: string]: (string | null) | undefined;
            };
        };
        "Rpg.ModObjects.Server.Ops.ActivityCreate": {
            initiatorId: string;
            ownerId: string;
            action: string;
        };
        "Rpg.ModObjects.Server.Ops.ActivityCreateByTemplate": {
            initiatorId: string;
            ownerId: string;
            activityTemplateName: string;
        };
        "Rpg.ModObjects.Server.Ops.ActivityOutcome": {
            activityId: string;
            args: {
                [key: string]: (string | null) | undefined;
            };
        };
        "Rpg.ModObjects.Server.Ops.DescribeModSet": {
            entityId: string;
            modSetId: string;
        };
        "Rpg.ModObjects.Server.Ops.DescribeProp": {
            entityId: string;
            prop: string;
        };
        "Rpg.ModObjects.Server.Ops.DescribeState": {
            entityId: string;
            state: string;
        };
        "Rpg.ModObjects.Server.Ops.SetState": {
            entityId: string;
            state: string;
            on: boolean;
        };
        "Rpg.ModObjects.Server.RpgContent": {
            /** Format: uuid */
            key: string;
            system: string;
            archetype: string;
            name: string;
        };
        "Rpg.ModObjects.Server.RpgRequest.Rpg.ModObjects.Mods.ModSet": {
            graphState: components["schemas"]["Rpg.ModObjects.RpgGraphState"];
            op?: (components["schemas"]["Rpg.ModObjects.Mods.ModSet"] | components["schemas"]["Rpg.ModObjects.Mods.ModSets.StateModSet"] | components["schemas"]["Rpg.ModObjects.Mods.ModSets.SyncedModSet"] | components["schemas"]["Rpg.ModObjects.Mods.ModSets.TimedModSet"] | components["schemas"]["Rpg.ModObjects.Mods.ModSets.TurnModSet"]) | null;
        };
        "Rpg.ModObjects.Server.RpgRequest.Rpg.ModObjects.Server.Ops.ActivityAct": {
            graphState: components["schemas"]["Rpg.ModObjects.RpgGraphState"];
            op: components["schemas"]["Rpg.ModObjects.Server.Ops.ActivityAct"];
        };
        "Rpg.ModObjects.Server.RpgRequest.Rpg.ModObjects.Server.Ops.ActivityCreate": {
            graphState: components["schemas"]["Rpg.ModObjects.RpgGraphState"];
            op: components["schemas"]["Rpg.ModObjects.Server.Ops.ActivityCreate"];
        };
        "Rpg.ModObjects.Server.RpgRequest.Rpg.ModObjects.Server.Ops.ActivityCreateByTemplate": {
            graphState: components["schemas"]["Rpg.ModObjects.RpgGraphState"];
            op: components["schemas"]["Rpg.ModObjects.Server.Ops.ActivityCreateByTemplate"];
        };
        "Rpg.ModObjects.Server.RpgRequest.Rpg.ModObjects.Server.Ops.ActivityOutcome": {
            graphState: components["schemas"]["Rpg.ModObjects.RpgGraphState"];
            op: components["schemas"]["Rpg.ModObjects.Server.Ops.ActivityOutcome"];
        };
        "Rpg.ModObjects.Server.RpgRequest.Rpg.ModObjects.Server.Ops.DescribeModSet": {
            graphState: components["schemas"]["Rpg.ModObjects.RpgGraphState"];
            op: components["schemas"]["Rpg.ModObjects.Server.Ops.DescribeModSet"];
        };
        "Rpg.ModObjects.Server.RpgRequest.Rpg.ModObjects.Server.Ops.DescribeProp": {
            graphState: components["schemas"]["Rpg.ModObjects.RpgGraphState"];
            op: components["schemas"]["Rpg.ModObjects.Server.Ops.DescribeProp"];
        };
        "Rpg.ModObjects.Server.RpgRequest.Rpg.ModObjects.Server.Ops.DescribeState": {
            graphState: components["schemas"]["Rpg.ModObjects.RpgGraphState"];
            op: components["schemas"]["Rpg.ModObjects.Server.Ops.DescribeState"];
        };
        "Rpg.ModObjects.Server.RpgRequest.Rpg.ModObjects.Server.Ops.SetState": {
            graphState: components["schemas"]["Rpg.ModObjects.RpgGraphState"];
            op: components["schemas"]["Rpg.ModObjects.Server.Ops.SetState"];
        };
        "Rpg.ModObjects.Server.RpgRequest.Rpg.ModObjects.Time.PointInTime": {
            graphState: components["schemas"]["Rpg.ModObjects.RpgGraphState"];
            op: components["schemas"]["Rpg.ModObjects.Time.PointInTime"];
        };
        "Rpg.ModObjects.Server.RpgResponse.Rpg.ModObjects.Actions.Activity": {
            graphState: components["schemas"]["Rpg.ModObjects.RpgGraphState"];
            data: components["schemas"]["Rpg.ModObjects.Actions.Activity"];
        };
        "Rpg.ModObjects.Server.RpgResponse.Rpg.ModObjects.Mods.ModSetDescription": {
            graphState: components["schemas"]["Rpg.ModObjects.RpgGraphState"];
            data: components["schemas"]["Rpg.ModObjects.Mods.ModSetDescription"];
        };
        "Rpg.ModObjects.Server.RpgResponse.Rpg.ModObjects.Props.PropDescription": {
            graphState: components["schemas"]["Rpg.ModObjects.RpgGraphState"];
            data: components["schemas"]["Rpg.ModObjects.Props.PropDescription"];
        };
        "Rpg.ModObjects.Server.RpgResponse.Rpg.ModObjects.Time.PointInTime": {
            graphState: components["schemas"]["Rpg.ModObjects.RpgGraphState"];
            data: components["schemas"]["Rpg.ModObjects.Time.PointInTime"];
        };
        "Rpg.ModObjects.Server.RpgResponse.System.Boolean": {
            graphState: components["schemas"]["Rpg.ModObjects.RpgGraphState"];
            data: boolean;
        };
        "Rpg.ModObjects.Server.RpgResponse.System.String": {
            graphState: components["schemas"]["Rpg.ModObjects.RpgGraphState"];
            data?: string | null;
        };
        "Rpg.ModObjects.States.State": {
            expiry: components["schemas"]["Rpg.ModObjects.Time.LifecycleExpiry"];
            readonly id: string;
            readonly name: string;
            readonly ownerId: string;
            readonly ownerArchetype?: string | null;
            readonly isPlayerVisible: boolean;
            readonly isOn: boolean;
            readonly onByTimePeriod: boolean;
            readonly onByUserAction: boolean;
            readonly onByCondition: boolean;
        };
        "Rpg.ModObjects.States.State.Rpg.Cyborgs.Actor": {
            expiry: components["schemas"]["Rpg.ModObjects.Time.LifecycleExpiry"];
            readonly id: string;
            readonly name: string;
            readonly ownerId: string;
            readonly ownerArchetype?: string | null;
            readonly isPlayerVisible: boolean;
            readonly isOn: boolean;
            readonly onByTimePeriod: boolean;
            readonly onByUserAction: boolean;
            readonly onByCondition: boolean;
        };
        "Rpg.ModObjects.States.State.Rpg.Cyborgs.Conditions.T": {
            expiry: components["schemas"]["Rpg.ModObjects.Time.LifecycleExpiry"];
            readonly id: string;
            readonly name: string;
            readonly ownerId: string;
            readonly ownerArchetype?: string | null;
            readonly isPlayerVisible: boolean;
            readonly isOn: boolean;
            readonly onByTimePeriod: boolean;
            readonly onByUserAction: boolean;
            readonly onByCondition: boolean;
        };
        "Rpg.ModObjects.States.State.Rpg.Cyborgs.RangedWeapon": {
            expiry: components["schemas"]["Rpg.ModObjects.Time.LifecycleExpiry"];
            readonly id: string;
            readonly name: string;
            readonly ownerId: string;
            readonly ownerArchetype?: string | null;
            readonly isPlayerVisible: boolean;
            readonly isOn: boolean;
            readonly onByTimePeriod: boolean;
            readonly onByUserAction: boolean;
            readonly onByCondition: boolean;
        };
        "Rpg.ModObjects.States.State.Rpg.ModObjects.States.T": components["schemas"]["Rpg.ModObjects.States.State"];
        /** @enum {string} */
        "Rpg.ModObjects.Time.LifecycleExpiry": "Unset" | "Pending" | "Active" | "Expired" | "Destroyed";
        "Rpg.ModObjects.Time.PointInTime": {
            type: components["schemas"]["Rpg.ModObjects.Time.PointInTimeType"];
            /** Format: int32 */
            count: number;
            readonly isEncounterTime: boolean;
            readonly isAfterEncounterTime: boolean;
        };
        /** @enum {string} */
        "Rpg.ModObjects.Time.PointInTimeType": "BeforeTime" | "TimeBegins" | "Waiting" | "EncounterBegins" | "Turn" | "EncounterEnds" | "TimePasses" | "TimeEnds";
        "Rpg.ModObjects.Time.Temporal": {
            now: components["schemas"]["Rpg.ModObjects.Time.PointInTime"];
        };
        "Rpg.ModObjects.Values.Dice": {
            readonly isConstant: boolean;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
