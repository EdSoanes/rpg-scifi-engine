/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/rpg/{system}/{archetype}/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    system: string;
                    archetype: string;
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Rpg.ModObjects.RpgGraphState"];
                        "text/json": components["schemas"]["Rpg.ModObjects.RpgGraphState"];
                        "text/plain": components["schemas"]["Rpg.ModObjects.RpgGraphState"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/rpg/{system}/entities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    system: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Rpg.Cms.Models.RpgContent"][];
                        "text/json": components["schemas"]["Rpg.Cms.Models.RpgContent"][];
                        "text/plain": components["schemas"]["Rpg.Cms.Models.RpgContent"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        "Rpg.Cms.Models.RpgContent": {
            /** Format: uuid */
            key: string;
            system: string;
            archetype: string;
            name: string;
        };
        "Rpg.Cyborgs.Actor": {
            readonly id: string;
            archetype: string;
            name: string;
            readonly archetypes: string[];
            expiry: components["schemas"]["Rpg.ModObjects.Time.LifecycleExpiry"];
            readonly states: components["schemas"]["Rpg.ModObjects.States.State"][];
            /** Format: int32 */
            readonly actions: number;
            /** Format: int32 */
            readonly strength: number;
            /** Format: int32 */
            readonly agility: number;
            /** Format: int32 */
            readonly health: number;
            /** Format: int32 */
            readonly brains: number;
            /** Format: int32 */
            readonly insight: number;
            /** Format: int32 */
            readonly charisma: number;
            /** Format: int32 */
            readonly focusPoints: number;
            /** Format: int32 */
            readonly currentFocusPoints: number;
            /** Format: int32 */
            readonly luckPoints: number;
            /** Format: int32 */
            readonly currentLuckPoints: number;
            /** Format: int32 */
            readonly reactions: number;
            /** Format: int32 */
            readonly staminaPoints: number;
            /** Format: int32 */
            readonly currentStaminaPoints: number;
            head: components["schemas"]["Rpg.Cyborgs.BodyPart"];
            torso: components["schemas"]["Rpg.Cyborgs.BodyPart"];
            leftArm: components["schemas"]["Rpg.Cyborgs.BodyPart"];
            rightArm: components["schemas"]["Rpg.Cyborgs.BodyPart"];
            leftLeg: components["schemas"]["Rpg.Cyborgs.BodyPart"];
            rightLeg: components["schemas"]["Rpg.Cyborgs.BodyPart"];
            /** Format: int32 */
            readonly lifePoints: number;
            /** Format: int32 */
            readonly currentLifePoints: number;
            /** Format: int32 */
            readonly defence: number;
            /** Format: int32 */
            readonly armourRating: number;
            /** Format: int32 */
            readonly unarmedDamageBonus: number;
            /** Format: int32 */
            readonly parryDamageReduction: number;
            /** Format: int32 */
            readonly rangedAttack: number;
            /** Format: int32 */
            readonly rangedAimBonus: number;
            /** Format: int32 */
            readonly meleeAttack: number;
            /** Format: int32 */
            readonly currentActions: number;
            hands: components["schemas"]["Rpg.ModObjects.RpgContainer"];
            wearing: components["schemas"]["Rpg.ModObjects.RpgContainer"];
        };
        "Rpg.Cyborgs.Armour": {
            /** Format: int32 */
            readonly armourRating: number;
            /** Format: int32 */
            readonly currentArmourRating: number;
            /** Format: int32 */
            readonly defenceModifier: number;
        } & components["schemas"]["Rpg.ModObjects.RpgEntity"];
        "Rpg.Cyborgs.BodyPart": {
            readonly id: string;
            archetype: string;
            name: string;
            readonly archetypes: string[];
            expiry: components["schemas"]["Rpg.ModObjects.Time.LifecycleExpiry"];
            entityId: string;
        };
        "Rpg.Cyborgs.MeleeWeapon": {
            damage: components["schemas"]["Rpg.ModObjects.Values.Dice"];
            /** Format: int32 */
            readonly hitBonus: number;
        } & components["schemas"]["Rpg.ModObjects.RpgEntity"];
        "Rpg.Cyborgs.PlayerCharacter": components["schemas"]["Rpg.Cyborgs.Actor"];
        "Rpg.Cyborgs.RangedWeapon": {
            damage: components["schemas"]["Rpg.ModObjects.Values.Dice"];
            /** Format: int32 */
            readonly hitBonus: number;
        } & components["schemas"]["Rpg.ModObjects.RpgEntity"];
        "Rpg.ModObjects.Actions.Action": {
            readonly id: string;
            readonly name: string;
            readonly ownerId: string;
            readonly ownerArchetype: string;
        };
        "Rpg.ModObjects.Lifecycles.ILifecycle": {
            expiry: components["schemas"]["Rpg.ModObjects.Time.LifecycleExpiry"];
        };
        "Rpg.ModObjects.RpgContainer": {
            readonly id: string;
            archetype: string;
            name: string;
            readonly archetypes: string[];
            expiry: components["schemas"]["Rpg.ModObjects.Time.LifecycleExpiry"];
            entityId: string;
        };
        "Rpg.ModObjects.RpgEntity": {
            readonly id: string;
            archetype: string;
            name: string;
            readonly archetypes: string[];
            expiry: components["schemas"]["Rpg.ModObjects.Time.LifecycleExpiry"];
            readonly states: components["schemas"]["Rpg.ModObjects.States.State"][];
            readonly actions: components["schemas"]["Rpg.ModObjects.Actions.Action"][];
        };
        "Rpg.ModObjects.RpgGraphState": {
            entities: (components["schemas"]["Rpg.Cyborgs.Armour"] | components["schemas"]["Rpg.Cyborgs.MeleeWeapon"] | components["schemas"]["Rpg.Cyborgs.PlayerCharacter"] | components["schemas"]["Rpg.Cyborgs.RangedWeapon"])[];
            contextId?: string | null;
            time: components["schemas"]["Rpg.ModObjects.Time.ITimeEngine"];
        };
        "Rpg.ModObjects.States.State": {
            readonly id: string;
            readonly name: string;
            readonly ownerId?: string | null;
            readonly ownerArchetype?: string | null;
            lifecycle: components["schemas"]["Rpg.ModObjects.Lifecycles.ILifecycle"];
            readonly isOn: boolean;
            readonly isOnConditionally: boolean;
            readonly isOnManually: boolean;
        };
        "Rpg.ModObjects.Time.ITimeEngine": {
            current: components["schemas"]["Rpg.ModObjects.Time.TimePoint"];
        };
        /** @enum {string} */
        "Rpg.ModObjects.Time.LifecycleExpiry": "Pending" | "Active" | "Expired" | "Remove";
        "Rpg.ModObjects.Time.TimePoint": {
            type: string;
            /** Format: int32 */
            tick: number;
        };
        "Rpg.ModObjects.Values.Dice": {
            readonly isConstant: boolean;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
