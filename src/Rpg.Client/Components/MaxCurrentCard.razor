@using Rpg.Sys.Components
@using System.ComponentModel
@using System.Diagnostics
@using Rpg.Sys.Components.Values
@inject NavigationManager NavigationManager
@inject IGameService<Human> Game

<MudGrid>
    <MudItem xs="8">
        <MudNumericField @bind-Value="Current" Label="@StatName" Variant="Variant.Text" Min="0" />
    </MudItem>
    <MudItem xs="4">
        <MudNumericField @bind-Value="Max" Label="Max" Variant="Variant.Text" Min="0" />
    </MudItem>
</MudGrid>

@code {
    [Parameter]
    public string? StatName { get; set; }

    [Parameter]
    public MaxCurrentValue? MaxCurrent { get; set; }

    protected override Task OnInitializedAsync()
    {
        MaxCurrent!.PropertyChanged += PropChanged;
        return base.OnInitializedAsync();
    }


    private void PropChanged(object? sender, PropertyChangedEventArgs e)
    {
        StateHasChanged();   
    }

    private int? Current
    {
        get => MaxCurrent?.Current;
        set => Game.Graph.Mods.Add(BaseOverrideModifier.Create(MaxCurrent!, value ?? 0, x => x.Current));
    }

    private int? Max
    {
        get => MaxCurrent?.Max;
        set => Game.Graph.Mods.Add(BaseOverrideModifier.Create(MaxCurrent!, value ?? 0, x => x.Max));
    }
}
