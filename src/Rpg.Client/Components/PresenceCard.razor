@using Rpg.Sys.Components
@using System.ComponentModel
@inject NavigationManager NavigationManager
@inject IGameService<Human> Game

<MudCard Elevation="25" Class="rounded-lg pb-4">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h5" Align="Align.Center">Presence</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudGrid>
            <MudItem xs="6">
                <MudNumericField @bind-Value="Size" Label="Size" Variant="Variant.Text" Min="0" />
            </MudItem>
            <MudItem xs="6">
                <MudNumericField @bind-Value="Weight" Label="Weight" Variant="Variant.Text" Min="0" />
            </MudItem>
            <MudItem xs="12">
                <MaxCurrentCard StatName="Light" MaxCurrent="Presence?.Light" />
            </MudItem>
            <MudItem xs="12">
                <MaxCurrentCard StatName="Sound" MaxCurrent="Presence?.Sound" />
            </MudItem>
            <MudItem xs="12">
                <MaxCurrentCard StatName="Heat" MaxCurrent="Presence?.Heat" />
            </MudItem>
        </MudGrid>
    </MudCardContent>
</MudCard>


@code {
    [Parameter]
    public Presence? Presence { get; set; }

    protected override Task OnInitializedAsync()
    {
        Presence!.PropertyChanged += PropChanged;
        return base.OnInitializedAsync();
    }


    private void PropChanged(object? sender, PropertyChangedEventArgs e)
    {
        StateHasChanged();
    }

    private int? Size
    {
        get => Presence?.Size;
        set => Game.Graph.Mods.Add(BaseOverrideModifier.Create(Presence!, value ?? 0, x => x.Size));
    }

    private int? Weight
    {
        get => Presence?.Weight;
        set => Game.Graph.Mods.Add(BaseOverrideModifier.Create(Presence!, value ?? 0, x => x.Weight));
    }
}
